from pprint import pprint
import numpy as np

def jacobi(A, b, N=25, tol=1e-4, x=None):
    """Solves the equation Ax=b via the Jacobi iterative method."""
    # Create an initial guess if needed
    if x is None:
        x = np.zeros(len(A[0]))

    # Create a vector of the diagonal elements of A
    D = np.diag(A)
    R = A - np.diagflat(D)

    # Iterate for N times or until the error is within the tolerance
    for i in range(N):
        x_new = (b - np.dot(R, x)) / D
        error = np.linalg.norm(x_new - x, ord=np.inf)
        print(f"Iteration {i + 1}: x = {x_new}, Error = {error}")
        
        # Check if the error is below the tolerance for convergence
        if error < tol:
            print("Convergence reached.")
            break
        x = x_new

    return x

# Define the system of equations from your question
A = np.array([[4, 1, -1, 1],
              [1, 4, -1, -1],
              [-1, -1, 5, 1],
              [1, -1, 1, 3]], dtype=float)

b = np.array([-2, -1, 0, 1], dtype=float)

# Initial guess
guess = np.array([0, 0, 0, 0], dtype=float)

# Run the Jacobi method
solution = jacobi(A, b, N=25, tol=1e-4, x=guess)

# Print the solution
print("Final solution:")
pprint(solution)
